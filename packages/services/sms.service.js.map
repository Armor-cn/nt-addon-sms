{"version":3,"sources":["../src/services/sms.service.ts"],"names":[],"mappings":"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","file":"sms.service.js","sourcesContent":["import { HttpException, Inject, Injectable } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport * as moment from \"moment\";\nimport { Repository } from \"typeorm\";\n\nimport { SmsLog } from \"../entities/sms-log.entity\";\nimport { SmsTemplate } from \"../entities/sms-template.entity\";\nimport { Sms } from \"../entities/sms.entity\";\nimport { SmsLogData } from \"../interfaces/sms-log-info.interface\";\nimport { SmsRequest } from \"../interfaces/sms-request.interface\";\nimport { SmsResponse } from \"../interfaces/sms-response.interface\";\nimport { ParamUtil } from \"../utils/param.util\";\nimport { QcloudService } from \"./qcloud.service\";\n\n@Injectable()\nexport class SmsService {\n\n    constructor(\n        @Inject(QcloudService) private readonly qcloudService: QcloudService,\n        @Inject(ParamUtil) private readonly paramUtil: ParamUtil,\n        @InjectRepository(Sms) private readonly smsRepository: Repository<Sms>,\n        @InjectRepository(SmsTemplate) private readonly smsTemplateRepository: Repository<SmsTemplate>,\n        @InjectRepository(SmsLog) private readonly smsLogRepository: Repository<SmsLog>\n    ) {\n    }\n\n    /**\n     * 创建短信插件\n     * @param sms 短信插件实体\n     */\n    async createSms(sms: Sms): Promise<void> {\n        const existSms: Sms | undefined = await this.smsRepository.createQueryBuilder(\"sms\").where(`sms.app_id='${sms.appId}' OR sms.sign_name='${sms.signName}'`).getOne();\n        if (existSms) {\n            const existError = existSms.appId === sms.appId ? `appId=${sms.appId}` : `signName=${sms.signName}`;\n            throw new HttpException(`短信插件'${existError}'已存在`, 400);\n        }\n        //  传入模板信息才会保存，不传入不保存\n        if (sms.templates && sms.templates.length !== 0) {\n            // 模板去重，返回相同模板的id\n            const templates = (await this.smsTemplateRepository.findByIds(sms.templates.map(item => item.templateId))).concat(sms.templates);\n            const sameTemplateId = await this.paramUtil.findSameTemplateId(templates);\n            if (sameTemplateId.length !== 0) {\n                throw new HttpException(`存在相同模板templateId='[${sameTemplateId.toString()}]'`, 400);\n            }\n        }\n        try {\n            // 加密 appKey\n            sms.appKey = await this.paramUtil.encryptor(sms.appId, sms.appKey);\n            await this.smsRepository.save(sms);\n        } catch (error) {\n            throw new HttpException(`数据库错误：${error.toString()}`, 501);\n        }\n    }\n\n    /**\n     * 增加短信模板\n     * @param appId 短信插件id\n     * @param smsTemplate 短信模板实体数组\n     */\n    async addTemplateToSms(appId: number, smsTemplate: Array<SmsTemplate>): Promise<void> {\n        const existSms: Sms | undefined = await this.smsRepository.findOne(appId);\n        if (!existSms) {\n            throw new HttpException(`指定短信插件'appId=${appId}'不存在`, 400);\n        }\n        // 模板去重，返回相同模板的id\n        const templates = (await this.smsTemplateRepository.findByIds(smsTemplate.map(item => item.templateId))).concat(smsTemplate);\n        const sameTemplateId = await this.paramUtil.findSameTemplateId(templates);\n        if (sameTemplateId.length !== 0) {\n            throw new HttpException(`存在相同模板templateId='[${sameTemplateId.toString()}]'`, 400);\n        }\n        try {\n            const newSmsTemplate = await this.smsTemplateRepository.save(smsTemplate);\n            await this.smsRepository.createQueryBuilder().relation(Sms, \"templates\").of(existSms).add(newSmsTemplate);\n        } catch (error) {\n            throw new HttpException(`数据库错误：${error.toString()}`, 501);\n        }\n    }\n\n    /**\n     * 删除短信插件\n     * @param appId 短信插件id\n     */\n    async deleteSms(appId: string): Promise<void> {\n        const existSms: Sms | undefined = await this.smsRepository.findOne(appId);\n        if (!existSms) {\n            throw new HttpException(`指定短信插件'appId=${appId}'不存在`, 400);\n        }\n        try {\n            await this.smsRepository.delete(appId);\n        } catch (error) {\n            throw new HttpException(`数据库错误：${error.toString()}`, 501);\n        }\n    }\n\n    /**\n     * 删除短信模板\n     * @param templateId 短信模板id\n     */\n    async deleteSmsTemplate(templateId: string): Promise<void> {\n        try {\n            await this.smsTemplateRepository.delete(templateId);\n        } catch (error) {\n            throw new HttpException(`数据库错误：${error.toString()}`, 501);\n        }\n    }\n\n    /**\n     * 更新短信插件信息\n     * @param appId 短信插件id\n     * @param signName 短信签名\n     * @param validationTime 验证码有效期\n     */\n    async updateSms(appId: string, newSignName: string, newValidationTime: number): Promise<void> {\n        const existSms: Sms | undefined = await this.smsRepository.findOne(appId);\n        if (!existSms) {\n            throw new HttpException(`指定短信插件'appId=${appId}'不存在`, 400);\n        } else if (await this.smsRepository.findOne({ signName: newSignName })) {\n            throw new HttpException(`指定签名'signName=${newSignName}'已存在`, 400);\n        }\n        try {\n            existSms.signName = newSignName;\n            existSms.validationTime = newValidationTime;\n            await this.smsRepository.save(existSms);\n        } catch (error) {\n            throw new HttpException(`数据库错误：${error.toString()}`, 501);\n        }\n    }\n\n    /**\n     * 更新短信模板信息\n     * @param templateId 模板id\n     * @param name 模板标示\n     * @param remark 模板备注\n     */\n    async updateSmsTemplate(templateId: string, name: string, remark: string): Promise<void> {\n        const existTemplate: SmsTemplate | undefined = await this.smsTemplateRepository.findOne(templateId);\n        if (!existTemplate) {\n            throw new HttpException(`指定短信模板'templateId=${templateId}'不存在`, 400);\n        }\n        try {\n            existTemplate.name = name;\n            existTemplate.remark = remark;\n            await this.smsTemplateRepository.save(existTemplate);\n        } catch (error) {\n            throw new HttpException(`数据库错误：${error.toString()}`, 501);\n        }\n    }\n\n    /**\n     * 查询指定 appId 的短信插件信息\n     * @param appId 短信插件id\n     */\n    async findOneSms(appId: string): Promise<Sms> {\n        return this.smsRepository.findOne(appId, { relations: [\"templates\"] });\n    }\n\n    /**\n     * 查询所有短信插件信息\n     */\n    async findAllSms(): Promise<Array<Sms>> {\n        return this.smsRepository.find({ relations: [\"templates\"] });\n    }\n\n    /**\n     * 查询指定 templateId 的短信发送记录\n     * @param templateId 短信模板id\n     */\n    async findOneSmsLog(templateId: string): Promise<Array<SmsLog>> {\n        const existTemplate: SmsTemplate | undefined = await this.smsTemplateRepository.findOne(templateId);\n        if (!existTemplate) {\n            throw new HttpException(`指定短信模板'templateId=${templateId}'不存在`, 400);\n        }\n        return this.smsTemplateRepository.createQueryBuilder().relation(SmsTemplate, \"smsLogs\").of(templateId).loadMany();\n    }\n\n    /**\n     * 查询所有短信发送记录\n     */\n    async findAllSmsLog(): Promise<Array<SmsLogData>> {\n        return this.smsLogRepository.find();\n    }\n\n    /**\n     * 发送短信，并保存短信发送记录\n     * @param smsRequest 发送短信请求体\n     */\n    async sendMessageByQCloud(smsRequest: SmsRequest): Promise<SmsResponse> {\n        const existSms = await this.smsRepository.findOne(smsRequest.appId);\n        if (!existSms) {\n            throw new HttpException(`指定短信插件'appId=${smsRequest.appId}'不存在`, 400);\n        } else {\n            const existTemplate = await this.smsTemplateRepository.findOne(smsRequest.templateId);\n            if (!existTemplate) { throw new HttpException(`指定短信模板'templateId=${smsRequest.templateId}'不存在`, 400); }\n\n            smsRequest.signName = existSms.signName;\n            // 解密 appKey\n            smsRequest.appKey = await this.paramUtil.decryptor(existSms.appId, existSms.appKey);\n            // 生成验证码，传递有效时间\n            const validationCode = await this.paramUtil.genValidationCode();\n            const validationTime = existSms.validationTime;\n            smsRequest.templateParam = [`${validationCode}`, `${validationTime}`];\n            // 发送短信，调用腾讯云短信服务接口，保存 response 返回的消息和状态码\n            await this.qcloudService.sendSms(smsRequest).then(resolve => {\n                this.saveSmsLog(true, resolve.code, resolve.message, smsRequest, new SmsLog());\n            }).catch(reject => {\n                this.saveSmsLog(false, reject.code, reject.message, smsRequest, new SmsLog());\n                throw new HttpException(`发送失败，原因：${reject.message}`, reject.code);\n            });\n            return { code: 200, message: \"发送短信成功\", validationCode, validationTime };\n        }\n    }\n\n    /**\n     * 保存短信发送记录\n     * @param isSuccess 是否发送成功\n     * @param responseCode 云服务api返回的状态码\n     * @param responseMessage 云服务api返回的信息\n     * @param smsRequest 短信发送数据实体\n     * @param smsLog 短信发送记录\n     */\n    private async saveSmsLog(isSuccess: boolean, responseCode: string, responseMessage: string, smsRequest: SmsRequest, smsLog: SmsLog) {\n        // 保存接收短信的手机号\n        smsLog.targetMobile = smsRequest.mobile.join();\n        // 短信验证码及有效期\n        smsLog.validationCode = parseInt(smsRequest.templateParam[0]);\n        smsLog.validationTime = parseInt(smsRequest.templateParam[1]);\n        // 是否发送成功\n        smsLog.isSuccess = isSuccess;\n        smsLog.responseCode = responseCode;\n        smsLog.responseMessage = responseMessage;\n        // 发送时间\n        smsLog.sendTime = moment().format(\"YYYY-MM-DD HH:mm:ss\");\n        const newLog = await this.smsLogRepository.save(smsLog);\n        this.smsTemplateRepository.createQueryBuilder().relation(SmsTemplate, \"smsLogs\").of(smsRequest.templateId).add(newLog);\n    }\n}\n"]}