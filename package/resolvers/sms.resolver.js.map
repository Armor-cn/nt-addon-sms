{"version":3,"sources":["../src/resolvers/sms.resolver.ts"],"names":[],"mappings":"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","file":"sms.resolver.js","sourcesContent":["import { Inject } from \"@nestjs/common\";\nimport { Mutation, Query, Resolver } from \"@nestjs/graphql\";\n\nimport { SmsTemplate } from \"../entities/sms-template.entity\";\nimport { Sms } from \"../entities/sms.entity\";\nimport { SmsInfo } from \"../interfaces/sms-info.interface\";\nimport { SmsLogInfo } from \"../interfaces/sms-log-info.interface\";\nimport { SmsService } from \"../services/sms.service\";\n\n@Resolver()\nexport class SmsResolver {\n    constructor(@Inject(SmsService) private readonly smsService: SmsService) {\n    }\n\n    @Query(\"findAllSmsInfo\")\n    async findAllSms(): Promise<SmsInfo> {\n        const sms = await this.smsService.findAllSms();\n        return { code: 200, message: \"获取所有短信插件信息成功\", data: sms };\n    }\n\n    @Query(\"findSmsInfo\")\n    async findOneSms(req, body: { appId: string }): Promise<SmsInfo> {\n        const sms = await this.smsService.findOneSms(body.appId);\n        return { code: 200, message: \"获取短信插件信息成功\", data: [sms] };\n    }\n\n    @Query(\"findAllSmsLog\")\n    async findAllSmsLog(): Promise<SmsLogInfo> {\n        const smsLog = await this.smsService.findAllSmsLog();\n        return { code: 200, message: \"获取所有短信发送记录成功\", data: smsLog };\n    }\n\n    @Query(\"findSmsLog\")\n    async findOneSmsLog(req, body: { templateId: number }): Promise<SmsLogInfo> {\n        const smsLog = await this.smsService.findOneSmsLog(body.templateId);\n        return { code: 200, message: \"获取短信发送记录成功\", data: smsLog };\n    }\n\n    @Query(\"sendMessage\")\n    async sendMessage(req, body): Promise<{ code: number, message: string }> {\n        return this.smsService.sendMessageByQCloud(body.type, body.smsRequest);\n    }\n\n    @Query(\"smsValidator\")\n    async smsValidator(req, body: { templateId: number, validationCode: number }): Promise<{}> {\n        const isSuccess = await this.smsService.validator(body.templateId, body.validationCode);\n        const code = isSuccess ? 200 : 406;\n        const message = isSuccess ? \"验证通过\" : \"验证不通过\";\n        return { code, message };\n    }\n\n    @Mutation(\"createSms\")\n    async createSms(req, body: { sms: Sms }): Promise<{}> {\n        await this.smsService.createSms(body.sms);\n        return { code: 200, message: \"创建短信插件成功\" };\n    }\n\n    @Mutation(\"addTemplateToSms\")\n    async addTemplateToSms(req, body: { appId: string, smsTemplate: Array<SmsTemplate> }): Promise<{}> {\n        await this.smsService.addTemplateToSms(body.appId, body.smsTemplate);\n        return { code: 200, message: \"增加模板成功\" };\n    }\n\n    @Mutation(\"deleteSms\")\n    async deleteSms(req, body: { appId: string }): Promise<{}> {\n        await this.smsService.deleteSms(body.appId);\n        return { code: 200, message: \"删除短信插件成功\" };\n    }\n\n    @Mutation(\"deleteSmsTemplate\")\n    async deleteSmsTemplate(req, body: { templateId: string }): Promise<{}> {\n        await this.smsService.deleteSmsTemplate(body.templateId);\n        return { code: 200, message: \"删除模板成功\" };\n    }\n\n    @Mutation(\"updateSms\")\n    async updateSms(req, body: { appId: string, signName: string, validationTime: number }): Promise<{}> {\n        await this.smsService.updateSms(body.appId, body.signName, body.validationTime);\n        return { code: 200, message: \"更新短信插件成功\" };\n    }\n\n    @Mutation(\"updateSmsTemplate\")\n    async updateSmsTemplate(req, body: { templateId: number, name: string, remark: string }): Promise<{}> {\n        await this.smsService.updateSmsTemplate(body.templateId, body.name, body.remark);\n        return { code: 200, message: \"更新短信模板成功\" };\n    }\n}\n"]}