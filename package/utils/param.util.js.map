{"version":3,"sources":["utils/param.util.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAAA,2CAA4C;AAC5C,iCAAiC;AACjC,iCAAiC;AASjC,IAAa,SAAS,GAAtB;IAOU,kBAAkB,CAAC,QAA4B;;YACjD,MAAM,eAAe,GAAG,EAAE,CAAC;YAC3B,MAAM,WAAW,GAAG,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;YAC1D,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,GAAG,CAAC,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,WAAW,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,eAAe,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACtK,OAAO,eAAe,CAAC;QAC3B,CAAC;KAAA;IAKK,iBAAiB;;YACnB,OAAO,IAAI,MAAM,EAAE,CAAC,OAAO,CAAC,EAAE,GAAG,EAAE,MAAM,EAAE,CAAC,CAAC;QACjD,CAAC;KAAA;IAQK,SAAS,CAAC,MAAc,EAAE,QAAgB;;YAE5C,MAAM,GAAG,GAAG,MAAM,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,MAAM,EAAE,CAAC;YAEhE,MAAM,EAAE,GAAG,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;YAE5B,MAAM,MAAM,GAAG,MAAM,CAAC,cAAc,CAAC,aAAa,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC;YAE7D,MAAM,UAAU,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;YAEzF,OAAO,UAAU,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;QACzC,CAAC;KAAA;IAQK,SAAS,CAAC,MAAc,EAAE,UAAkB;;YAE9C,MAAM,GAAG,GAAG,MAAM,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,MAAM,EAAE,CAAC;YAEhE,MAAM,EAAE,GAAG,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;YAE5B,MAAM,QAAQ,GAAG,MAAM,CAAC,gBAAgB,CAAC,aAAa,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC;YAEjE,MAAM,QAAQ,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,UAAU,EAAE,QAAQ,CAAC,EAAE,QAAQ,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;YAE1F,OAAO,QAAQ,CAAC,QAAQ,EAAE,CAAC;QAC/B,CAAC;KAAA;CACJ,CAAA;AA1DY,SAAS;IADrB,mBAAU,EAAE;GACA,SAAS,CA0DrB;AA1DY,8BAAS","file":"param.util.js","sourcesContent":["import { Injectable } from \"@nestjs/common\";\nimport * as Chance from \"chance\";\nimport * as crypto from \"crypto\";\n\nimport { SmsTemplate } from \"../entities/sms-template.entity\";\n\n\n/**\n * 短信验证码服务的各类参数工具\n */\n@Injectable()\nexport class ParamUtil {\n\n    /**\n     * 查找相同的短信模板id\n     * @param template 短信模板\n     * @returns 相同的短信模板id\n     */\n    async findSameTemplateId(template: Array<SmsTemplate>): Promise<Array<string>> {\n        const existTemplateId = [];\n        const templateIds = template.map(item => item.templateId);\n        templateIds.forEach(item => { (templateIds.indexOf(item) !== templateIds.lastIndexOf(item) && existTemplateId.indexOf(item) === -1) && existTemplateId.push(item); });\n        return existTemplateId;\n    }\n\n    /**\n     * 生成验证码\n     */\n    async genValidationCode(): Promise<number> {\n        return new Chance().natural({ max: 100000 });\n    }\n\n    /**\n     * 对称加密工具\n     * @param aesKey 密匙\n     * @param original 原文\n     * @returns 密文\n     */\n    async encryptor(aesKey: string, original: string): Promise<string> {\n        // 使用 aesKey 生成加密 key\n        const key = crypto.createHash(\"sha256\").update(aesKey).digest();\n        // 初始化向量，截取key前16字节\n        const iv = key.slice(0, 16);\n        // 使用 aes-256-cbc 算法创建 cipher\n        const cipher = crypto.createCipheriv(\"aes-256-cbc\", key, iv);\n        // 加密\n        const cipherText = Buffer.concat([cipher.update(Buffer.from(original)), cipher.final()]);\n        // 返回密文\n        return cipherText.toString(\"base64\");\n    }\n\n    /**\n     * 解密工具\n     * @param aesKey 密匙\n     * @param cipherText 密文\n     * @returns 原文\n     */\n    async decryptor(aesKey: string, cipherText: string): Promise<string> {\n        // 使用 aesKey 生成解密 key\n        const key = crypto.createHash(\"sha256\").update(aesKey).digest();\n        // 初始化向量，截取key前16字节\n        const iv = key.slice(0, 16);\n        // 使用 aes-256-cbc 算法创建 decipher\n        const decipher = crypto.createDecipheriv(\"aes-256-cbc\", key, iv);\n        // 解密\n        const original = Buffer.concat([decipher.update(cipherText, \"base64\"), decipher.final()]);\n        // 返回原文\n        return original.toString();\n    }\n}"]}