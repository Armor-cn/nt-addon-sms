{"version":3,"sources":["../src/services/qcloud.service.ts"],"names":[],"mappings":"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","file":"qcloud.service.js","sourcesContent":["import { Inject, Injectable } from \"@nestjs/common\";\nimport * as Chance from \"chance\";\nimport * as crypto from \"crypto\";\nimport { post } from \"request\";\n\nimport { SmsRequest } from \"../interfaces/sms-request.interface\";\nimport { ParamUtil } from \"../utils/param.util\";\n\n@Injectable()\nexport class QcloudService {\n\n    constructor(\n        @Inject(ParamUtil) private readonly paramUtil: ParamUtil\n    ) { }\n\n    private smsApiBase = \"https://yun.tim.qq.com/v5/tlssmssvr/\";\n\n    /**\n     * 发送短信\n     * @param smsRequest 短信参数\n     * @returns Promise<any>\n     */\n    async sendSms(smsRequest: SmsRequest): Promise<any> {\n        // api 请求地址\n        let url = \"\";\n        // 随机数\n        const random = new Chance().natural({ max: 100000 });\n        // 发送短信系统当前时间戳\n        const time = Math.floor(Date.now() / 1000);\n        // App 凭证\n        const sig = await this.calculateSignature(smsRequest.appKey, random, time, smsRequest.mobile);\n        // 根据 mobile 类型，改变 api 地址及 mobile 参数内容\n        let mobile;\n        if (smsRequest.mobile.length === 1) {\n            url = this.smsApiBase + \"sendsms\";\n            mobile = { mobile: smsRequest.mobile[0], nationcode: \"86\" };    // nationcode 为国家码，现只支持国内(86)\n        } else {\n            url = this.smsApiBase + \"sendmultisms2\";\n            mobile = smsRequest.mobile.map(item => ({ mobile: item, nationcode: \"86\" }));\n        }\n        url += `?sdkappid=${smsRequest.appId}&random=${random}`;\n        // api 调用参数\n        const reqBody = JSON.stringify({\n            sig,\n            time,\n            sign: smsRequest.signName,\n            tpl_id: smsRequest.templateId,\n            params: smsRequest.templateParam,\n            tel: mobile\n        });\n        return this.post(url, reqBody);\n    }\n\n    /**\n     * 计算腾讯云短信服务App凭证\n     *\n     * @param {string} appKey SDK AppID 对应的 App Key\n     * @param {number} random 随机数\n     * @param {number} time 发送短信验证码的时间\n     * @param {Array<string>} mobile 用户手机号\n     * @returns {string} App 凭证\n     */\n    private async calculateSignature(appKey: string, random: number, time: number, mobile: Array<string>): Promise<string> {\n        return crypto.createHash(\"sha256\")\n            .update(`appkey=${appKey}&random=${random}&time=${time}&mobile=${mobile.join()}`, \"utf8\")\n            .digest(\"hex\");\n    }\n\n    /**\n     * 向腾讯云发送 post 请求\n     *\n     * @param  url  请求地址\n     * @param options 请求参数\n     * @returns Promise<any>\n     */\n    private async post(url: string, reqBody: any): Promise<any> {\n        return new Promise(((resolve, reject) => {\n            post(url, { body: reqBody, headers: { \"Content-Type\": \"application/json\" } }, (err, res, body) => {\n                const responseBody = JSON.parse(body);\n                // 返回结果为0表示发送成功， 非0则返回错误码和错误信息\n                if (responseBody.result === 0) {\n                    resolve({ code: responseBody.result, message: \"发送成功\" });\n                } else {\n                    reject({ code: responseBody.result, message: responseBody.errmsg });\n                }\n            });\n        }));\n    }\n}\n"]}