{"version":3,"sources":["interceptors/exception.interceptor.ts"],"names":[],"mappings":";;;;;;;;AAAA,2CAA8F;AAE9F,8CAA4C;AAG5C,IAAa,iBAAiB,GAA9B;IACI,SAAS,CAAC,OAAyB,EAAE,KAAsB;QACvD,OAAO,KAAK,CAAC,IAAI,CACb,sBAAU,CAAC,CAAC,GAAG,EAAE,MAAM,EAAO,EAAE;YAC5B,IAAI,GAAG,YAAY,sBAAa,EAAE;gBAC9B,OAAO,OAAO,CAAC,OAAO,CAAC;oBACnB,IAAI,EAAE,GAAG,CAAC,SAAS,EAAE;oBACrB,OAAO,EAAE,GAAG,CAAC,WAAW,EAAE;iBAC7B,CAAC,CAAC;aACN;iBAAM;gBACH,OAAO,OAAO,CAAC,OAAO,CAAC;oBACnB,IAAI,EAAE,GAAG;oBACT,OAAO,EAAE,UAAU,GAAG,GAAG,CAAC,QAAQ,EAAE;iBACvC,CAAC,CAAC;aACN;QACL,CAAC,CAAC,CACL,CAAC;IACN,CAAC;CACJ,CAAA;AAlBY,iBAAiB;IAD7B,mBAAU,EAAE;GACA,iBAAiB,CAkB7B;AAlBY,8CAAiB","file":"exception.interceptor.js","sourcesContent":["import { ExecutionContext, HttpException, Injectable, NestInterceptor } from \"@nestjs/common\";\nimport { Observable } from \"rxjs\";\nimport { catchError } from \"rxjs/operators\";\n\n@Injectable()\nexport class ErrorsInterceptor implements NestInterceptor {\n    intercept(context: ExecutionContext, call$: Observable<any>): Observable<any> {\n        return call$.pipe(\n            catchError((err, caught): any => {\n                if (err instanceof HttpException) {\n                    return Promise.resolve({\n                        code: err.getStatus(),\n                        message: err.getResponse()\n                    });\n                } else {\n                    return Promise.resolve({\n                        code: 500,\n                        message: \"出现了意外错误：\" + err.toString()\n                    });\n                }\n            })\n        );\n    }\n}"]}