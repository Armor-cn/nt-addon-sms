{"version":3,"sources":["../src/controllers/sms.controller.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,2CAAgE;AAGhE,yDAAqD;AAGrD,IAAa,aAAa,GAA1B;IACI,YAAiD,UAAsB;QAAtB,eAAU,GAAV,UAAU,CAAY;IAAI,CAAC;IAOtE,WAAW,CAAS,IAA8C;;YACpE,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE;gBACrC,OAAO,IAAI,CAAC,UAAU,CAAC,mBAAmB,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;aAC1E;YACD,OAAO,EAAE,IAAI,EAAE,GAAG,EAAE,OAAO,EAAE,mCAAmC,EAAE,CAAC;QACvE,CAAC;KAAA;IAQK,YAAY,CAAS,IAAgD;;YACvE,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC;YACpF,MAAM,IAAI,GAAG,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;YACnC,MAAM,OAAO,GAAG,SAAS,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC;YAC7C,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC;QAC7B,CAAC;KAAA;CACJ,CAAA;AAnBG;IADC,aAAI,CAAC,aAAa,CAAC;IACD,WAAA,aAAI,EAAE,CAAA;;;;gDAKxB;AAQD;IADC,aAAI,CAAC,cAAc,CAAC;IACD,WAAA,aAAI,EAAE,CAAA;;;;iDAKzB;AA1BQ,aAAa;IADzB,mBAAU,CAAC,KAAK,CAAC;IAED,WAAA,eAAM,CAAC,wBAAU,CAAC,CAAA;qCAA8B,wBAAU;GAD9D,aAAa,CA2BzB;AA3BY,sCAAa","file":"sms.controller.js","sourcesContent":["import { Body, Controller, Inject, Post } from \"@nestjs/common\";\n\nimport { SmsRequest } from \"../interfaces/sms-request.interface\";\nimport { SmsService } from \"../services/sms.service\";\n\n@Controller(\"sms\")\nexport class SmsController {\n    constructor(@Inject(SmsService) private readonly smsService: SmsService) { }\n\n    /**\n     * 发送短信接口\n     * @param body example: {\"type\": 2, smsRequest: { \"appId\": \"1234567890\", \"templateId\": 123456, \"templateParam\": [\"xxxxx\", \"xxxxx\"], \"mobile\": [\"13512345678\"] } }\n     */\n    @Post(\"sendMessage\")\n    async sendMessage(@Body() body: { type: number, smsRequest: SmsRequest }): Promise<{ code: number, message: string }> {\n        if ([0, 1, 2].indexOf(body.type) !== -1) {\n            return this.smsService.sendMessageByQCloud(body.type, body.smsRequest);\n        }\n        return { code: 406, message: \"type参数错误：0-通知短信，1-验证码短信，2-自定义参数短信\" };\n    }\n\n    /**\n     * 校验验证码合法性\n     *\n     * @param body 发送短信的模板ID和验证码\n     */\n    @Post(\"smsValidator\")\n    async smsValidator(@Body() body: { mobile: string, validationCode: number }): Promise<{ code: number, message: string }> {\n        const isSuccess = await this.smsService.validator(body.mobile, body.validationCode);\n        const code = isSuccess ? 200 : 406;\n        const message = isSuccess ? \"验证通过\" : \"验证不通过\";\n        return { code, message };\n    }\n}\n"]}